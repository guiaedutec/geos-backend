require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SurveyResponsesController, type: :controller do
  login_admin

  # This should return the minimal set of attributes required to create a valid
  # SurveyResponse. As you add validations to SurveyResponse, be sure to
  # adjust the attributes here as well.
  let(:school_id) { create(:school).to_param }
  let(:valid_attributes) do
    attributes_for(:survey_response, school_id: school_id)
  end

  let(:invalid_attributes) { { school_id: nil } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SurveyResponsesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all survey_responses as @survey_responses' do
      survey_response = SurveyResponse.create! valid_attributes
      get :index
      expect(assigns(:survey_responses)).to eq([survey_response])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested survey_response as @survey_response' do
      survey_response = SurveyResponse.create! valid_attributes
      get :show, id: survey_response.to_param
      expect(assigns(:survey_response)).to eq(survey_response)
    end
  end

  describe 'GET #new' do
    it 'assigns a new survey_response as @survey_response' do
      get :new
      expect(assigns(:survey_response)).to be_a_new(SurveyResponse)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested survey_response as @survey_response' do
      survey_response = SurveyResponse.create! valid_attributes
      get :edit, id: survey_response.to_param
      expect(assigns(:survey_response)).to eq(survey_response)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new SurveyResponse' do
        expect do
          post :create, survey_response: valid_attributes
        end.to change(SurveyResponse, :count).by(1)
      end

      it 'assigns a newly created survey_response as @survey_response' do
        post :create, survey_response: valid_attributes
        expect(assigns(:survey_response)).to be_a(SurveyResponse)
        expect(assigns(:survey_response)).to be_persisted
      end

      it 'redirects to the created survey_response' do
        post :create, survey_response: valid_attributes
        expect(response).to redirect_to(SurveyResponse.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved survey_response as @survey_response' do
        post :create, survey_response: invalid_attributes
        expect(assigns(:survey_response)).to be_a_new(SurveyResponse)
      end

      it "re-renders the 'new' template" do
        post :create, survey_response: invalid_attributes
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested survey_response' do
        survey_response = SurveyResponse.create! valid_attributes
        put :update, id: survey_response.to_param, survey_response: new_attributes
        survey_response.reload
        skip('Add assertions for updated state')
      end

      it 'assigns the requested survey_response as @survey_response' do
        survey_response = SurveyResponse.create! valid_attributes
        put :update, id: survey_response.to_param, survey_response: valid_attributes
        expect(assigns(:survey_response)).to eq(survey_response)
      end

      it 'redirects to the survey_response' do
        survey_response = SurveyResponse.create! valid_attributes
        put :update, id: survey_response.to_param, survey_response: valid_attributes
        expect(response).to redirect_to(survey_response)
      end
    end

    context 'with invalid params' do
      it 'assigns the survey_response as @survey_response' do
        survey_response = SurveyResponse.create! valid_attributes
        put :update, id: survey_response.to_param, survey_response: invalid_attributes
        expect(assigns(:survey_response)).to eq(survey_response)
      end

      it "re-renders the 'edit' template" do
        survey_response = SurveyResponse.create! valid_attributes
        put :update, id: survey_response.to_param, survey_response: invalid_attributes
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested survey_response' do
      survey_response = SurveyResponse.create! valid_attributes
      expect do
        delete :destroy, id: survey_response.to_param
      end.to change(SurveyResponse, :count).by(-1)
    end

    it 'redirects to the survey_responses list' do
      survey_response = SurveyResponse.create! valid_attributes
      delete :destroy, id: survey_response.to_param
      expect(response).to redirect_to(survey_responses_url)
    end
  end
end
